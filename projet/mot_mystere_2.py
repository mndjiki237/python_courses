""" Projet 5 : Le Scribe de la Proph√©tie (I/O, JSON et Pathlib)
Maintenant que vous ma√Ætrisez la logique et les boucles, nous allons 
nous concentrer sur le c≈ìur de l'automatisation et du Brand Storytelling : 
la gestion des donn√©es et des fichiers.

Ce projet utilisera le jeu que vous venez de cr√©er pour enregistrer 
les exploits (ou les √©checs) des joueurs dans un journal magique.

Le programme devra :

Reprendre le code complet du jeu du Labyrinthe.

Utiliser le module json pour enregistrer les r√©sultats dans un fichier.

Cr√©er une fonction nomm√©e enregistrer_resultat qui prend en param√®tres : 
le nom du joueur, le statut de la partie (Gagn√©/Perdu) et le nombre de tentatives restantes.

Cette fonction devra :

D√©finir le nom du fichier de journal (journal_des_herauts.json).

Lire le contenu existant du fichier JSON (s'il existe).

Ajouter le nouveau r√©sultat √† la liste des enregistrements.

R√©√©crire la liste compl√®te dans le fichier JSON.

etape 1
    importer le module json
    creer une fonction enregistrer_resultat qui prend en entree :
    le nom du joueur, le statut de la partie (Gagn√©/Perdu) et le nombre de tentatives restantes. 
    creer un fichier journal_des_herauts.json a l interieur de la fonction si non existe
etape 2
    lire le fichier si existe
    ajouter les element du status du jour, initial pour une premiere partie
    pour chacque partie effectuer, lire le fichier et reecrire les unevelles infprmations 




"""
import json
from pathlib import Path 
import random
# NOTE : `os` n'est plus n√©cessaire car `pathlib` est utilis√©.

# --- PARAM√àTRES ET INITIALISATION ---

# Utilisation de Pathlib pour le chemin (meilleure pratique)
# Path(__file__).resolve().parent est l'endroit le plus s√ªr pour le fichier,
# en assumant que le script est dans un environnement r√©el.
FICHIER_JOURNAL = Path(__file__).resolve().parent / "journal_des_herauts.json" 

nombre_mystere = random.randint(1, 100)
lives = 5

print("‚ú® BIENVENUE DANS LE LABYRINTHE DU MYST√àRE ‚ú®")
print(f"Vous avez {lives} tentatives pour trouver le Nombre Secret, cach√© entre 1 et 100.")

user_name = input("Entrer votre nom de H√©raut (Alias Magique) : ")
# Fissure 3 colmat√©e : Initialisation du statut
status_du_jour = "Abandon" 
tentatives_utilisees = 5 


# --- D√âFINITION DE LA FONCTION ---

def enregistrer_resultat(nom_joueur, statut_partie, tentatives_finales):
    """Enregistre le r√©sultat de la partie dans un journal JSON structur√©."""
    
    # 1. Pr√©paration du nouvel enregistrement
    nouvel_enregistrement = {
        "heraut": nom_joueur,
        "statut": statut_partie,
        "tentatives_restantes": tentatives_finales
    }
    
    # 2. Lecture du Codex Ancien (avec double protection des exceptions)
    enregistrements = []
    try:
        with open(FICHIER_JOURNAL, "r") as f:
            # Fissure 1 colmat√©e : gestion de deux erreurs sp√©cifiques
            enregistrements = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        # Si le fichier n'existe pas OU s'il est vide/mal form√©, on commence avec une liste vide.
        enregistrements = []
        
    # 3. Ajout et √âcriture du Fichier
    # Fissure 2 colmat√©e : Ajout d'un DICTIONNAIRE √† la liste
    enregistrements.append(nouvel_enregistrement) 

    try:
        with open(FICHIER_JOURNAL, "w") as f:
            json.dump(enregistrements, f, indent=4)
        print("\nüìú Le Scribe a grav√© votre exploit dans le Journal des H√©rauts. (journal_des_herauts.json)")
    except Exception as e:
        print(f"\n‚ùå Erreur critique lors de l'√©criture du journal: {e}")


# --- LOGIQUE DE JEU ---

while lives > 0:
    print(f"\n--- Il vous reste {lives} tentatives. ---")
    
    # Boucle Interne pour la Saisie Valide
    while True:
        user_input = input("Entrez votre proposition (un nombre) : ")
        try:
            user_choice = int(user_input)
            break
        except ValueError:
            print("‚ùå Erreur : Ce n'est pas un nombre valide. Veuillez r√©essayer.")
            continue
    
    # Logique de Comparaison
    if user_choice == nombre_mystere:
        print(f"\nüåü F√âLICITATIONS ! Vous avez trouv√© le Nombre Myst√®re : {nombre_mystere} !")
        status_du_jour = "Gagn√©" # Mettre √† jour le statut
        tentatives_utilisees = 5 - lives # Calculer les tentatives
        break 
    elif user_choice > nombre_mystere:
        print("Indice : Le Nombre Myst√®re est **plus petit** que votre proposition.")
        lives -= 1
    elif user_choice < nombre_mystere:
        print("Indice : Le Nombre Myst√®re est **plus grand** que votre proposition.")
        lives -= 1

    tentatives_utilisees = 5 - lives # Mettre √† jour le nombre de tentatives utilis√©es


# --- PROCLAMATION FINALE & ENREGISTREMENT ---

if lives == 0:
    print(f"\nüóùÔ∏è LABYRINTHE FERM√â. Vous avez √©chou√© √† trouver le Nombre Myst√®re.")
    print(f"Le Secret √©tait : {nombre_mystere}. Votre Qu√™te s'arr√™te ici, mais l'inspiration demeure !")
    status_du_jour = "Perdu"
    # tentatives_utilisees reste √† 5

# Appel final √† la fonction pour sceller l'enregistrement
enregistrer_resultat(user_name, status_du_jour, 5 - lives)
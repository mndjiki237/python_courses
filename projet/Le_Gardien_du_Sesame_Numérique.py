""" 

Projet 1 : Le Gardien du S√©same Num√©rique üè∞
Pour notre premier grand d√©fi, nous allons cr√©er un programme digne d'un 
syst√®me de s√©curit√© de ch√¢teau enchant√©, qui ne r√©v√©lera ses secrets qu'√† un 
utilisateur ayant un mot de passe parfait. Ce projet mettra √† l'√©preuve vos fondations.

Le programme devra :

Demander √† l'utilisateur de saisir un nom d'utilisateur (alias magique).

Demander √† l'utilisateur de saisir un mot de passe secret.

V√©rifier la validit√© de ce mot de passe selon plusieurs r√®gles strictes.

Afficher un message clair : soit de bienvenue (si le mot de passe est valide),
soit un message d'erreur pr√©cis (s'il ne l'est pas).

√âtape 1 : Collecte des Sceaux et Pr√©paration de la Boussole
    Saisir le nom d'utilisateur (le Sceau du H√©raut) et le stocker dans la variable NOM_HERAUT.

    Saisir le mot de passe secret (le Sceau d'Acc√®s) et le stocker dans la variable MOT_SECRET.

    Cr√©er une variable EST_VALIDE et lui donner la valeur VRAI. C'est notre Boussole de Validit√© qui nous guidera.

√âtape 2 : L'√âpreuve des Quatre Lumi√®res (V√©rification S√©quentielle)
    Pour chacune des √©preuves, si le mot de passe √©choue, nous affichons un message 
    d'erreur et nous faisons basculer la EST_VALIDE sur FAUX.

    Lumi√®re de la Longueur (R√®gle 4) :

    SI la longueur de MOT_SECRET est inf√©rieure √† 8 :

        Afficher le message : "Erreur : Le Sceau d'Acc√®s est trop court. Il doit contenir au moins 8 caract√®res."
        EST_VALIDE devient FAUX.

    Lumi√®re de la Majest√© (R√®gle 1) :

    SI MOT_SECRET ne contient pas de lettre Majuscule :

        Afficher le message : "Erreur : Le Sceau d'Acc√®s manque de Majest√©. Il lui faut au moins une lettre majuscule."
        EST_VALIDE devient FAUX.

    Lumi√®re de la Pr√©cision (R√®gle 2) :

    SI MOT_SECRET ne contient pas de Chiffre :

        Afficher le message : "Erreur : Le Sceau d'Acc√®s manque de Pr√©cision. Il lui faut au moins un chiffre num√©rique."
        EST_VALIDE devient FAUX.

    SI MOT_SECRET contient le NOM_HERAUT (sans se soucier de la casse) :

        Afficher le message : "Erreur : Le Sceau d'Acc√®s est trop proche du Sceau du H√©raut. Il ne doit pas contenir votre nom."
    SINON
        EST_VALIDE devient FAUX.

√âtape 3 : La Proclamation Finale
SI la variable EST_VALIDE est VRAI :

    Afficher le message enchant√© : "F√©licitations, √¥ H√©raut {NOM_HERAUT} ! 
    La Proph√©tie est accomplie ! Votre acc√®s au C≈ìur de Python est accord√©. Le voyage continue. ‚ú®"

SINON :

    Afficher le message de r√©primande : "Acc√®s refus√©. Les enchantements de protection 
    sont activ√©s. Veuillez suivre les r√®gles pour obtenir l'acc√®s."
"""
# √âTAPE 1 : Collecte des Sceaux et Pr√©paration de la Boussole
# Petite astuce de pro (Le√ßons 78/79) : en Python, on utilise souvent 
# des noms de variables en minuscules avec des underscores (snake_case).
user_name = input("Entrer votre nom (Alias Magique): ").lower() # On met tout en minuscule tout de suite
password = input("Saisir un mot de passe secret: ")

is_valid = True # La Boussole de Validit√© est initialis√©e √† VRAI

# √âTAPE 2 : L'√âpreuve des Quatre Lumi√®res (V√©rification Ind√©pendante)
print("\n--- Les √âpreuves commencent ---")
# Chaque test est un 'if' ind√©pendant pour rapporter TOUTES les erreurs!

# 1. LUMI√àRE DE LA LONGUEUR (R√®gle 4)
if len(password) < 8:
    print("‚ùå Erreur : Le Sceau d'Acc√®s est trop court. Il doit contenir au moins 8 caract√®res.")
    is_valid = False

# 2. LUMI√àRE DE LA MAJEST√â (R√®gle 1)
# L'utilisation de 'any' est MAGISTRALE ici!
if not any(c.isupper() for c in password):
    print("‚ùå Erreur : Le Sceau d'Acc√®s manque de Majest√©. Il lui faut au moins une lettre majuscule.")
    is_valid = False

# 3. LUMI√àRE DE LA PR√âCISION (R√®gle 2)
# Encore une fois, la formule 'any' est parfaite!
if not any(c.isdigit() for c in password):
    print("‚ùå Erreur : Le Sceau d'Acc√®s manque de Pr√©cision. Il lui faut au moins un chiffre num√©rique.")
    is_valid = False

# 4. LUMI√àRE DE LA DISSOCIATION (R√®gle 3)
# Astuce Pro: On met le mot de passe aussi en minuscule avant de chercher (Le√ßons 99, 105).
# C'est la fa√ßon la plus robuste de v√©rifier l'inclusion sans se soucier des majuscules/minuscules!
if user_name in password.lower():
    print("‚ùå Erreur : Le Sceau d'Acc√®s est trop proche du Sceau du H√©raut. Il ne doit pas contenir votre nom.")
    is_valid = False

# AJOUT : L'ajustement de votre r√®gle personnelle sur le nom (si le nom est vide ou trop court)
# J'ai retir√© le `len(Name <= 2)` qui provoquait une erreur de syntaxe et l'ai remplac√© par la v√©rification de longueur.
if not user_name or len(user_name) <= 2:
    print("‚ùå Erreur : Le Sceau du H√©raut est trop secret. Votre Alias doit faire au moins 3 caract√®res.")
    is_valid = False
    
print("--- Les √âpreuves sont termin√©es ---\n")

# √âTAPE 3 : La Proclamation Finale
if is_valid:
    # Utilisation d'une f-string pour une int√©gration magique (Le√ßon 119)
    print(f"""
üëë F√âLICITATIONS, √î H√âRAUT {user_name.capitalize()} ! 
La Proph√©tie est accomplie ! Votre acc√®s au C≈ìur de Python est accord√©. 
Le voyage continue avec plus d'inspiration et de puissance. ‚ú®
""")
else:
    print("""
‚ö†Ô∏è ACC√àS REFUS√â. Les enchantements de protection sont activ√©s. 
Veuillez r√©viser les r√®gles (marqu√©es par ‚ùå) pour obtenir l'acc√®s.
""")